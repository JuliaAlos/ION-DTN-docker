#!/bin/bash

./cleanup
sleep 1
echo "Starting ION..."

# Define node list directory
export ION_NODE_LIST_DIR="$PWD"

# Define function to start an ION node
function startNode() {

    # Go to this node's folder
    cd "nodes/$1"

	# Clear files
	if [ -f "ion.log" ]
	then
		rm ion.log
	fi
	if [ -f "node.stdout" ]
	then
		rm "node.stdout"
	fi

    # Touch the file to avoid error
    touch node.stdout
	touch ion.log

    # Ensure that scripts are executable
    chmod +x ionstart
    chmod +x ionstop

    # Start ION and direct output to log file
    ./ionstart >& node.stdout || { echo "Error starting node $1. Check node.stdout for details."; exit 1; }

    # Check that ION has started correctly
    if [ $? -ne 0 ]
    then
        echo "Node $1 not started: Aborting Test"
	    exit 1
    fi

    # ======================================================================================
    # === DEFINE ENDPOINTS USED BY UTILITY SERVICES
    # ======================================================================================

    # Attach the utility to respond to a ping at endpoint ipn:x.100
    bpecho ipn:"$1".1 &

    # Attach the utility to receive a file at endpoint ipn:x.101
    bprecvfile ipn:"$1".2 &

    # Attach the utility to get bundles from bpsource at endpoint ipn:x.102
    #bpsink ipn:"$1".102 &

    # ======================================================================================
    # === DEFINE ENDPOINTS FOR UTILITY SERVICES
    # ======================================================================================

    # Notify success
    echo "Node $1 succesfully started!"
}

# Check if a parameter was passed
if [ $# -ne 1 ]; then
    echo "Usage: $0 <node_folder>"
    exit 1
fi

# Clean all ION processes
./cleanup

# Get the folder name from the parameter
folder=$1

# Check if the specified folder exists
if [ ! -d "nodes/$folder" ]; then
    echo "Error: Node folder 'nodes/$folder' does not exist."
    exit 1
fi

# Start the specified node
echo "Starting node $folder..."
startNode $folder

# Wait for the node to start
wait $!