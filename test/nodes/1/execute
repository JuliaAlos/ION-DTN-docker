#!/bin/bash
#
# Tests that bping produces expected output and behaves well.
#
# documentation boilerplate


FAIL=0
# set timeouts based on OS type
if [[ $1 == "linux" ]] || [[ $1 == "mac" ]] ; then
	TIMETOWAIT1=4
	TIMETOWAIT2=15
else
	TIMETOWAIT1=5
	TIMETOWAIT2=25
fi

bpecho ipn:1.1 & BPECHOPID=$!
sleep $TIMETOWAIT1

echo ""
echo "Verify that bping can ping bpecho loopback..."
bping -c 5 -i 1 -q 0 ipn:2.1 ipn:1.1 > bpingoutput1

if ! grep -q "5 bundles transmitted, 5 bundles received" bpingoutput1; then
    echo "ERROR: Didn't receive expected 5 ping responses:"
    cat bpingoutput1
    FAIL=1
fi

echo ""
echo "Verify that bping doesn't choke on unexpected bundles..."
bping -c 5 -i 1 -q 0 ipn:1.2 ipn:1.1 > bpingoutput2 &
sleep $TIMETOWAIT1
bptrace ipn:1.3 ipn:1.2 dtn:none 60 1.0 "this is a bundle that bping isn't expecting and can't parse"
sleep $TIMETOWAIT1

if grep -q "ipn:1.3" bpingoutput2; then
    echo "ERROR: bping tried to parse the non-ping bundle from ipn:1.3"
    cat bpingoutput2
    FAIL=1
fi

if ! grep -q "5 bundles transmitted, 5 bundles received" bpingoutput2; then
    echo "ERROR: bping didn't ignore the non-ping bundle from ipn:1.3"
    cat bpingoutput2
    FAIL=1
fi

echo ""
echo "Verify that if bping is given SIGINT, it terminates quickly..."
bping -c 2 -i 15 -q 0 ipn:1.2 ipn:1.1 > bpingoutput3 & BPINGPID=$!
sleep $TIMETOWAIT1
SECONDS=0
kill -s SIGINT $BPINGPID
wait $BPINGPID
PINGSECONDS=$SECONDS
if [ $PINGSECONDS -ge 15 ]; then
    echo "ERROR: It took $PINGSECONDS seconds for bping to clean up and exit, too long."
    FAIL=1
fi




exit $FAIL

